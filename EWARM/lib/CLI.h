#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#define configCOMMAND_INT_MAX_OUTPUT_SIZE 128

#ifndef COMMAND_INTERPRETER_H
#define COMMAND_INTERPRETER_H

typedef int (*pdCOMMAND_LINE_CALLBACK)( char *writeBuffer, size_t writeBufferLen, const char *commandString );

typedef struct Command
{
	const char * const command;				/* The command that causes commandInterpreter to be executed.  For example "help".  Must be all lower case. */
	const char * const helpString;			/* String that describes how to use the command.  Should start with the command itself, and end with "\r\n".  For example "help: Returns a list of all the commands\r\n". */
	const pdCOMMAND_LINE_CALLBACK commandInterpreter;	/* A pointer to the callback function that will return the output generated by the command. */
	int8_t expectedNumberOfParameters;			/* Commands expect a fixed number of parameters, which may be zero. */
} Command;

#define xCommandLineInput Command

void register_command( const Command * const commandToRegister );

int process_command( const char * const commandInput, char * writeBuffer, size_t writeBufferLen  );

char *get_output_buffer( void );

char *get_parameter( char *commandString, int wantedParameter, int *parameterStringLength );

#endif